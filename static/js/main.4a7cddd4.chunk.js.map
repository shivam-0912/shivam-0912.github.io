{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","key","phone","message","submitted","postDataHandler","data","axios","post","then","response","console","log","setState","className","type","value","this","onChange","event","target","rows","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"kRAgEeA,G,kNA5DbC,MAAM,CACJC,IAAI,GACJC,MAAM,GACNC,QAAQ,GACRC,WAAU,G,EAEZC,gBAAkB,WAChB,IAAMC,EAAO,CACTL,IAAK,EAAKD,MAAMC,IAChBC,MAAO,EAAKF,MAAME,MAClBC,QAAS,EAAKH,MAAMG,SAExBI,IAAMC,KAAK,0CAA2CF,GACjDG,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GAIZ,EAAKG,SAAU,CACbZ,IAAI,GACJC,MAAM,GACNC,QAAQ,GACRC,WAAU,Q,uDAKb,IAAD,OAER,OAEI,yBAAKU,UAAU,QAEZ,iDACC,uCACA,6BACA,2BAAOC,KAAK,OAAOC,MAAOC,KAAKjB,MAAME,MAAOgB,SAAU,SAACC,GAAD,OAAW,EAAKN,SAAS,CAACX,MAAOiB,EAAMC,OAAOJ,WACpG,6BACA,sCACA,6BACA,2BAAOD,KAAK,OAAOC,MAAOC,KAAKjB,MAAMC,IAAKiB,SAAU,SAACC,GAAD,OAAW,EAAKN,SAAS,CAACZ,IAAKkB,EAAMC,OAAOJ,WAChG,6BACA,0CACA,6BACA,8BAAUK,KAAK,IAAIL,MAAOC,KAAKjB,MAAMG,QAASe,SAAU,SAACC,GAAD,OAAW,EAAKN,SAAS,CAACV,QAASgB,EAAMC,OAAOJ,WACxG,6BAIA,6BACA,4BAAQM,QAASL,KAAKZ,iBAAtB,a,GAnDQkB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMrC,c","file":"static/js/main.4a7cddd4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css'\nclass App extends Component{\n  state={\n    key:'',\n    phone:'',\n    message:'',\n    submitted:false\n  }\n  postDataHandler = () => {\n    const data = {\n        key: this.state.key,\n        phone: this.state.phone,\n        message: this.state.message\n    };\n    axios.post('https://en1owokpogq6xuf.m.pipedream.net', data)\n        .then(response => {\n            console.log(response);\n            //this.props.history.push('/posts');//this will add another page to stack so this is basically somewhat diferent from routing\n            //but effectively does the same work\n            //routing changes the page while above method just add another page above it so there is a difference\n            this.setState( {\n              key:'',\n              phone:'',\n              message:'',\n              submitted:false\n            } );\n        });\n      \n}\nrender () {\n \n  return (\n     \n      <div className=\"send\">\n           \n         <h1>Send a whatsapp :</h1>\n          <label>Name</label>\n          <br/>\n          <input type=\"text\" value={this.state.phone} onChange={(event) => this.setState({phone: event.target.value})} />\n          <br/>\n          <label>Key</label>\n          <br/>\n          <input type=\"text\" value={this.state.key} onChange={(event) => this.setState({key: event.target.value})} />\n          <br/>\n          <label>Message</label>\n          <br/>\n          <textarea rows=\"4\" value={this.state.message} onChange={(event) => this.setState({message: event.target.value})} />\n          <br/>\n          {/* <label>Phone (with country code)</label>\n          <br/>\n          <input type=\"text\" value={this.state.phone} onChange={(event) => this.setState({phone: event.target.value})} /> */}\n          <br/>\n          <button onClick={this.postDataHandler}>Send</button>\n      </div>\n  );\n}\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}